import java.io.*;
public class Hotel implements NewInterface {
private String hName;
 Node headRoom;
 Booking[] bookingList;
private int numOfBooking;
int maxRoom =50;


public Hotel(String name, int maxBooking) {
	hName=name;
        headRoom= null;
        bookingList=new Booking[maxBooking];
        numOfBooking=0;
}


public int countRoom () {
	if(headRoom==null) 
            return 0;
        int count =0;
        Node current=headRoom;
        while (current !=null)
        {
            count++;
            current =current.getNext();
        }
        return count ;
            
        }
	public boolean addRoom (Room R)	{
            if (countRoom ()< maxRoom){
                Node n = new Node (R);
            n.setNext(headRoom);
            headRoom=n;
            return true;}
            return false;
        }

public boolean deleteRoom(int no ) {
	if (headRoom==null)
            return false;
        if (headRoom.getData().getRoomNum()==no ){
		Room temp =headRoom.getData();
                if ( temp.isAvailable()==false){
                    System.out.println (" the room is booked by person");
                    return false;
                }
                 headRoom=headRoom.getNext();
			return true;
		}
Node previous =headRoom;
Node current =headRoom.getNext();
while (current!=null){
    if (current.getData().getRoomNum()==no){
        if (current.getData().isAvailable()==true ){
         previous.setNext(current.getNext());
        return true;}
		else 
			System.out.println("this room is booked !");
		
		return false;
}
else {
    previous= previous.getNext();
    current=current.getNext();
}
}
return false;
}

public boolean addBooking(Booking B) {
	if(numOfBooking<bookingList.length) {
		bookingList[numOfBooking++]=new Booking (B);
		return true;}
	return false;
}

public boolean cancelBooking(String id, int roomNum) {
    for (int i = 0; i < numOfBooking; i++) {
        if (bookingList[i].getID().equals(id) && bookingList[i].getRoom().getRoomNum() == roomNum) {
            if (bookingList[i].isCheckedOut()) {
                System.out.println("Cannot cancel booking as it has already been checked out.");
                return false;
            }
            if (bookingList[i].isCancelled()) {
                System.out.println("This booking has already been cancelled.");
                return false;
            }

            bookingList[i].cancelBooking(); 
            for (int j = i; j < numOfBooking - 1; j++) {
                bookingList[j] = bookingList[j + 1];
            }
            numOfBooking--;
            bookingList[numOfBooking] = null;
            return true;
        }}
   
    System.out.println("No booking found to cancel.");
    return false;
    
}
public Booking findBooking (String id,int roomNum) {
	for(int i=0;i<numOfBooking ;i++) {
		if (bookingList[i].getID().equals(id)&&bookingList[i].getRoom().getRoomNum()==roomNum) 
	return bookingList[i];}
		
		return null;
}

public Room findRoom (int roomNo) {
		if (headRoom==null)
		return null;
                Node current =headRoom;
                while (current !=null){
                    if (current.getData().getRoomNum()==roomNo)
                        return current.getData();
                    current=current.getNext();
                }
	return null;
}

public StandardRoom[] getStandard() {
	StandardRoom[] list=new StandardRoom[countRoom()];
	int j=0 ;
        
        Node current =headRoom;
        while (current!=null){
            if (current.getData() instanceof StandardRoom)
                list[j++]=(StandardRoom) current.getData();
            current=current.getNext();
        }
        return list;
}
public Suite[] getSuites() {
	Suite [] list=new Suite[countRoom()];
	int j=0 ;
        Node current =headRoom;
	while (current !=null){
            if (current.getData() instanceof Suite)
                list[j++]=(Suite )current.getData();
            current=current.getNext();
        }
        return list;
	}
	


public DeluxeSuite[] getSuites(int nOfMR) {
	DeluxeSuite [] list=new DeluxeSuite[countRoom()];
	int j=0 ;
        
        Node current =headRoom;
while (current!=null){
	if(current.getData()instanceof DeluxeSuite && ((DeluxeSuite) current.getData()).getNumOfMoreRooms()>=nOfMR)
	list[j++]=(DeluxeSuite) current.getData();
           current =current.getNext();
               }
		return list;
	}
public ExecutiveSuite[] getSuites(String meetingSize) {
	ExecutiveSuite [] list=new ExecutiveSuite[countRoom()];
	int j=0 ;
	 Node current =headRoom;
while (current!=null){
		if(current.getData() instanceof ExecutiveSuite && ((ExecutiveSuite) current.getData()).getMeetingRoomSize().equalsIgnoreCase(meetingSize))
			list[j++]=(ExecutiveSuite) current.getData();
    current =current.getNext();
}
return list;
	}	

public Room[] getAvailableRooms() {
	Room [] list=new Room[countRoom()];
	int j=0 ;
  Node current =headRoom;
while (current!=null){
		if(current.getData().isAvailable() )
			list[j++]= current.getData();
                  current =current.getNext();
}
		return list;
	
	
}
public boolean isOverlapping(Room room, int sDay, int sMonth, int sYear, int eDay, int eMonth, int eYear) {
    for (int i = 0; i < numOfBooking; i++) {
        Booking b = bookingList[i];

      
        if (b.getRoom().getRoomNum() == room.getRoomNum()) {
            
           
            if (!((sYear > b.getEndYear()) || 
                  (sYear == b.getEndYear() && sMonth > b.getEndMonth()) || 
                  (sYear == b.getEndYear() && sMonth == b.getEndMonth() && sDay >= b.getEndDay()) ||

                  (eYear < b.getStartYear()) || 
                  (eYear == b.getStartYear() && eMonth < b.getStartMonth()) || 
                  (eYear == b.getStartYear() && eMonth == b.getStartMonth() && eDay < b.getStartDay()))) {
                return true; 
            }
        }
    }
    return false; 
}

public void saveInfo(){
    try {
        File out =new File ("Room.dat");
        FileOutputStream fOutputS= new FileOutputStream(out);
        ObjectOutputStream oOutputS=new ObjectOutputStream(fOutputS);
       oOutputS.writeObject(headRoom);
       oOutputS.close();
       File  out2=new File ("bookingList.dat");
       FileOutputStream fOutputS2= new FileOutputStream(out2);
       ObjectOutputStream oOutputS2= new ObjectOutputStream(fOutputS2);
       
       oOutputS2.writeInt(numOfBooking);
       oOutputS2.writeObject(bookingList);
       oOutputS2.close();
       
        
    } catch (IOException e){
        System.out.println(e.toString ());
                
    }
}
  public void readData ()  {
      try{
          File f= new File ("Room.dat");
          FileInputStream  fInput =new FileInputStream (f);
          ObjectInputStream oInputS= new ObjectInputStream(fInput);
          headRoom= (Node) oInputS.readObject();
          oInputS.close();
             File f2= new File ("bookingList.dat");
          FileInputStream  fInput2 =new FileInputStream (f2);
          ObjectInputStream oInputS2= new ObjectInputStream(fInput2);
          
          numOfBooking=oInputS2.readInt();
          bookingList= (Booking[]) oInputS2.readObject();
          oInputS2.close();
          
          System.out.println(" data in files are loaded");
      }
      catch (ClassNotFoundException ex){
          System.out.println(ex.toString());
      }
catch (IOException e){
    System.out.println(e.toString());
      }
  }    
        
        
public int getNumOfOfbooking () {
	return numOfBooking;
	
}
public Booking[] getBookingList(){
	return bookingList;
}

}
