
public class Hotel {
	
	private String HotelName;
	 Room[] roomList;
	 Booking[] bookingList;
	private int numOfRooms;
	private int numOfBooking;
	
	
	public Hotel(String Name, int number) {
		roomList=new Room[70];
		bookingList=new Booking [number];
		HotelName = Name;
		numOfBooking = 0;
		numOfRooms=0;
	}
	
	
	public boolean addRoom (Room R) {
		if(numOfRooms<roomList.length) {
			roomList[numOfRooms++]=R;
			return true;}
		return false;}
	
	public boolean deleteRoom(int no ) {
		for (int i=0;i<numOfRooms;i++)
		if (roomList[i].getRoomNum()==no) {
			if(roomList[i].isAvailable()==true) {
				for(int j=i;j<numOfRooms-1;j++)
					roomList[j]=roomList[j+1];
				numOfRooms--;
				roomList[numOfRooms]=null;
				return true;
			}
			else 
				System.out.println("this room is booked !");
			}
			return false;
		
		
	}
	
	public boolean addBooking(Booking B) {
		if(numOfBooking<bookingList.length) {
			bookingList[numOfBooking++]=new Booking (B);
			return true;}
		return false;
	}

	public boolean cancelBooking (String id,int roomNum) {
		for(int i=0;i<numOfBooking ;i++) {
			if (bookingList[i].getID().equals(id)&&bookingList[i].getRoom().getRoomNum()==roomNum)
			{
				bookingList[i].checkOut();
				bookingList[i]=bookingList[numOfBooking-1];
				numOfBooking--;
				bookingList[numOfBooking]=null;
				return true;
			}
		}
		return false;
		
	}
	public Booking findBooking (String id,int roomNum) {
		for(int i=0;i<numOfBooking ;i++) {
			if (bookingList[i].getID().equals(id)&&bookingList[i].getRoom().getRoomNum()==roomNum) 
		return bookingList[i];}
			
			return null;
	}
	
	public Room findRoom (int RoomNo) {
		for (int i=0 ;i<numOfRooms;i++)
			if (roomList[i].getRoomNum()==RoomNo)
				return roomList[i];
				
				return null;
		
	}

	public StandardRoom[] getStandard() {
		StandardRoom[] list=new StandardRoom[numOfRooms];
		int j=0 ;
		for (int i=0;i<numOfRooms;i++) 
			if(roomList[i] instanceof StandardRoom )
				list[j++]=(StandardRoom) roomList[i];
			return list;
		
	}
	
	public Suite[] getSuites() {
		Suite [] list=new Suite[numOfRooms];
		int j=0 ;
		for (int i=0;i<numOfRooms;i++) 
			if(roomList[i] instanceof Suite )
				list[j++]=(Suite) roomList[i];
			return list;
		}
		
	
	
	public DeluxeSuite[] getSuites(int nOfMR) {
		DeluxeSuite [] list=new DeluxeSuite[numOfRooms];
		int j=0 ;
		for (int i=0;i<numOfRooms;i++) 
			if(roomList[i] instanceof DeluxeSuite && ((DeluxeSuite) roomList[i]).getNumOfMoreRooms()>=nOfMR)
				list[j++]=(DeluxeSuite) roomList[i];
			return list;
		}
	public ExecutiveSuite[] getSuites(String meetingSize) {
		ExecutiveSuite [] list=new ExecutiveSuite[numOfRooms];
		int j=0 ;
		for (int i=0;i<numOfRooms;i++) 
			if(roomList[i] instanceof ExecutiveSuite && ((ExecutiveSuite) roomList[i]).getMeetingRoomSize().equalsIgnoreCase(meetingSize))
				list[j++]=(ExecutiveSuite) roomList[i];
			return list;
		}	
	
	public Room[] getAvailableRooms() {
		Room [] list=new Room[numOfRooms];
		int j=0 ;
		for (int i=0;i<numOfRooms;i++) 
			if(roomList[i].isAvailable() )
				list[j++]= roomList[i];
			return list;
		
		
	}
	public boolean isOverlapping(Room room, int sDay, int sMonth, int sYear, int eDay, int eMonth, int eYear) {
	    for (int i = 0; i < numOfBooking; i++) {
	        Booking b = bookingList[i];

	      
	        if (b.getRoom().getRoomNum() == room.getRoomNum()) {
	            
	           
	            if (!((sYear > b.getEndYear()) || 
	                  (sYear == b.getEndYear() && sMonth > b.getEndMonth()) || 
	                  (sYear == b.getEndYear() && sMonth == b.getEndMonth() && sDay >= b.getEndDay()) ||

	                  (eYear < b.getStartYear()) || 
	                  (eYear == b.getStartYear() && eMonth < b.getStartMonth()) || 
	                  (eYear == b.getStartYear() && eMonth == b.getStartMonth() && eDay < b.getStartDay()))) {
	                return true; 
	            }
	        }
	    }
	    return false; 
	}
	public int getNumOfOfbooking () {
		return numOfBooking;
		
	}
	public Booking[] getBookingList(){
		return bookingList;
	}
}
-----------------------------------------------
public class Booking {
	private String name ;
	private String phoneNumber;
	private String ID;
	private Room room;
	private int startDay , startMonth , startYear;
	private int endDay ,endMonth , endYear;
	private int numOfDays;
	private double bill;
	
	public Booking (String name, String phoneNumber, String ID) {
		this.name =name;
		this.phoneNumber= phoneNumber;
		this.ID=ID;	}
public Booking (Booking B) {
	this.name = B.name;
	this.phoneNumber= B.phoneNumber;
	this.ID =B.ID;
	this.numOfDays= B.numOfDays;
	this.room= B.room;
	this.startDay=B.startDay;
	this.startMonth=B.startMonth;
	this.startYear=B.startYear;
	this.endDay=B.endDay;
	this.endMonth=B.endMonth;
	this.endYear=B.endYear;
	this.bill=B.bill;
}
//s=start , e=end
public boolean checkIn(Hotel hotel, Room room, int days, int sDay, int sMonth, int sYear, int eDay, int eMonth, int eYear) {
    if (!validateDate(sDay, sMonth, sYear, eDay, eMonth, eYear)) {
        System.out.println("Invalid date. Please try again.");
        return false;
    }

    
    if (hotel.isOverlapping(room, sDay, sMonth, sYear, eDay, eMonth, eYear)) {
        System.out.println("This room is already booked during the selected dates. Please choose another date or room.");
        return false;
    }

    numOfDays = days;
    this.room = room;
    startDay = sDay;
    startMonth = sMonth;
    startYear = sYear;
    endDay = eDay;
    endMonth = eMonth;
    endYear = eYear;
    
    bill = numOfDays * room.calculatePrice();

    return true;
}
public void checkOut() {
	if (room.isAvailable()==true)
		System.out.println("The room has already been checked out");
	else {
		room.setAvailable(true);
		System.out.println("check-out sucessful, Thank you for staying with us!");
		
	}
	
}
private boolean validateDate(int sDay, int sMonth, int sYear, int eDay, int eMonth, int eYear) {
   
    if (sMonth < 1 || sMonth > 12  || eMonth < 1 || eMonth > 12) {
        System.out.println("Invalid month.");
        return false;
    }

  
    if (sDay < 1 || sDay > getDaysInMonth(sMonth, sYear)) {
        System.out.println("Invalid start day.");
        return false;
    }

    if (eDay < 1 || eDay > getDaysInMonth(eMonth, eYear)) {
        System.out.println("Invalid end day.");
        return false;
    }
    int currentYear = 2025, currentMonth = 3, currentDay = 8; //current date
    if (sYear < currentYear ||
        (sYear == currentYear && sMonth < currentMonth) ||
        (sYear == currentYear && sMonth == currentMonth && sDay < currentDay)) {
        System.out.println(" Start date cannot be in the past.");
        return false;
    }

    if (eYear < sYear ||
        (eYear == sYear && eMonth < sMonth) ||
        (eYear == sYear && eMonth == sMonth && eDay <= sDay)) {
        System.out.println(" End date must be after start date.");
        return false;
    }

    return true; 
}
private int getDaysInMonth(int month, int year) {
    switch (month) {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            return 31;
        case 4: case 6: case 9: case 11:
            return 30;
        case 2:
            return isLeapYear(year) ? 29 : 28;
            default: 
            	return 0;
    }
    }
private boolean isLeapYear(int year) {
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
}



public String toString() {
	return "Customer Name: "+name + 	" , ID: "+ID +
			" ,Customer phone number: "+ phoneNumber+
 "\n"+ room + "\nNumber of Days: " + numOfDays + " ,The bill: "+ bill+
 "\nStart date :"+startDay+"-"+startMonth+"-"+startYear+"\n"+
 "End date:"+ endDay+"-"+endMonth+"-"+endYear;
}
	public void setName(String name){
this.name=name;
}
public String getName(){
return name;
}
public void setID(String ID){
this.ID=ID;
}
public String getID (){
return ID;
}
public void setPhoneNumber(String phoneNumber){
this.phoneNumber=phoneNumber;
}
public String getPhoneNumber (){
return phoneNumber;
}

public void setRoom(Room room){
this.room=room;
}
public Room getRoom (){
return room;
}
public int getStartDay() {
	return startDay;
}
public int getStartMonth() {
	return startMonth;
}
public int getStartYear() {
	return startYear;
}
public int getEndDay() {
	return endDay;
}
public int getEndMonth() {
	return endMonth;
}
public int getEndYear() {
	return endYear;
}


}
--------------

import java.util.Scanner ;

public class TestHotel {
static Scanner input =new Scanner (System.in);
		static Hotel hotel =new Hotel("Holiday Hotel",100);
		public static void main(String[] args) {

			for (int i = 1; i <= 20; i++) {
			    int roomNum =( 000 + i);// Ground floor
			    String kind = (i <= 10) ? "Single" : "Double"; 
			    double price = (i <= 10) ? 500.0 : 700.0; 
			    
			    StandardRoom standardRoom = new StandardRoom(roomNum , kind , price);
			    hotel.addRoom(standardRoom);
			}
			//------
			for (int i = 21; i <= 40 ; i++) {
			    boolean windowView = (i > 30);
			
			    int moreBeds;
			    if (i <= 25 || (i > 30 && i <= 35)) {
			        moreBeds = 1;
			    } else {
			        moreBeds = 2;
			    }

			    double price = 1000.0 + (moreBeds * 100);
			    int roomNumber = 100+ i; //first floor
			    Suite suiteRoom = new Suite(roomNumber, price, moreBeds, windowView);
			    hotel.addRoom(suiteRoom);
			}
			//-----
	//int roomNumber, double price, int moreBeds, boolean windowView ,int moreRooms,boolean hasBalcony
	DeluxeSuite deluxe1=new DeluxeSuite(108,2500.0,2,true,2,false);
	DeluxeSuite deluxe2=new DeluxeSuite(109,3000.0,0,true,3,true);
	
	
	//int roomNumber ,int moreBeds , boolean windowView, double price , String meetingRoomSize
	ExecutiveSuite executive1=new ExecutiveSuite(210,1,true,3500.0,"Small");
	ExecutiveSuite executive2=new ExecutiveSuite(211,1,false,4000.0,"Big");
	ExecutiveSuite executive3=new ExecutiveSuite(212,1,true,4500.0,"Medium");
	
	hotel.addRoom(deluxe1);
	hotel.addRoom(deluxe2);
	hotel.addRoom(executive1);
	hotel.addRoom(executive2);
	hotel.addRoom(executive3);
	
	
	
	//menu 
	int choice ; 
			do {
				System.out.println( "Welcome to the Holiday Hotel!, Select what do you need:");
				System.out.println("1) Make a new booking");
				System.out.println("2) Show room details ");
				System.out.println("3) Cancel\\check out booking");
				System.out.println("4) Search for a booking");
				System.out.println("5) Exit");
				choice = input.nextInt ();
				switch (choice) {
				case 1 : 
					makeNewBooking();
				break;
				
				case 2:
					showRoomInfo ();
					break;
				case 3:
					cancelBooking();
					break;
				case 4 :
					findBooking ();
				break;
				case 5:
					System.out.println("Thank you for using our system, Good bye!");
					break;
					default :
						System.out.println(" Invalid option, please try again. ");
						
			}
			}while (choice !=5);}
	//--------------------------------------------------------------------------------
			public static void makeNewBooking() {
				System.out.println("==============================================");
				System.out.println("\nStandard Room No.:(001,002,003,004)");
				System.out.println("Suite No.:(005,006,007)");
				System.out.println("Deluxe Suite No.:(108,109)");
				System.out.println("Executive Suite No.:(210,211,212)");
				System.out.println("\nEnter Room Number: ");
				int number = input.nextInt();
				Room r = hotel.findRoom(number);
				if ( r==null  ) {
	
						System.out.println("This room is not available, please try another one");
						    return;
						}
						System.out.println("Enter your full name: ");
						input.nextLine ();
						String name=input.nextLine();
						System.out.println ("Enter phone number:");
				
						String pNumber=input.next();
	
						System.out.println ("Enter your ID: ");
					
						String ID =input.next();
	
						Booking book =new Booking ( name, pNumber, ID);
						System.out.println ( "Enter the number of days for your stay: ") ;
						int day = input.nextInt() ; 
		
						boolean validBooking =false ;
				
						while (!validBooking) {
						System.out.print (" Enter start date (day ):");
						int startDay = input.nextInt ();
						System.out.print (" Month:");
						int startMonth = input.nextInt ();
						System.out.print(" year:");
						int startYear = input.nextInt ();
					
						System.out.print(" Enter end date(Day ):");
						int  endDay = input.nextInt ();
						System.out.print(" Month:");
						int endMonth = input.nextInt ();
						System.out.print(" year:");
						int endYear = input.nextInt ();
					
						validBooking =book.checkIn(hotel ,r, day,startDay, startMonth, startYear, endDay, endMonth, endYear);
						
						if (!validBooking ) {
							System.out.println(" enter valid date");
						}}
						hotel.addBooking(book); 
						System.out.println (  "Booking added successfully! Enjoy your stay!"); 
						System.out.println("==============================================\n");
						System.out.println (book.toString()) ;
				
			}
			//------------------------------------------------------------------------------------------------------------
			public static void showRoomInfo()
			
			{
				System.out.println("==============================================");
				System.out.println("\nEnter your choice:");
				System.out.println("1-show Standard rooms");
				System.out.println("2-show Suites");
				System.out.println("3-show Deluxe Suites with number of extra rooms");
				System.out.println("3-show Deluxe Suites with number of extra rooms");
				System.out.println("4-show Executive Suites with the size of meeting room");
				System.out.println("5-show all available rooms");
				System.out.println("6-return to main menue");
				
				
				int choice =input.nextInt();
				
				switch(choice) {
				case 1:
					StandardRoom[] list1 =hotel.getStandard();
					for(int i=0;i<list1.length;i++)
						if(list1[i]!=null) 
							System.out.println(list1[i].toString());
					System.out.println("==============================================\n");
					break;
				case 2:
					Suite [] list2 =hotel.getSuites();
					for(int i=0;i<list2.length;i++)
					if(list2[i]!=null&&!(list2[i] instanceof DeluxeSuite)&&!(list2[i] instanceof ExecutiveSuite)) 
							System.out.println(list2[i].toString());
					System.out.println("==============================================\n");
					break;
				case 3:
					System.out.println("Enter how many extra rooms:");
					int numR=input.nextInt();
					Suite [] list3 =hotel.getSuites(numR);
					for(int i=0;i<list3.length;i++)
						if(list3[i]!=null) 
							System.out.println(list3[i].toString());
					System.out.println("==============================================\n");
					break;
				case 4:
					System.out.println("Enter the size of meeting room:");
					String  meetingR=input.next();
					Suite [] list4 =hotel.getSuites(meetingR);
					for(int i=0;i<list4.length;i++)
						if(list4[i]!=null) 
							System.out.println(list4[i].toString());
					System.out.println("==============================================\n");
					break;
				case 5:
					Room [] list5 =hotel.getAvailableRooms();
					for(int i=0;i<list5.length;i++)
						if(list5[i]!=null) {
							System.out.println(list5[i].getClass().getSimpleName());
							System.out.println(list5[i].toString());
							System.out.println("==============================================\n");
				} break;
				case 6 : 
					System.out.println("");
					break;
					default:
						System.out.println("invaild input !");
				}
			}
			//--------------------------------------------------------------------------------
	public static void cancelBooking() {
		System.out.println("==============================================");
			System.out.println("\nEnter your Choice :");
			System.out.println("1- Cancel booking:");
			System.out.println("2- Checkout from your booking: ");
			System.out.println("3- return to the main menu ");
			int choice =input.nextInt();
			switch(choice) {
			case 1 :
				System.out.println("Enter your ID:");
				String id = input.next();
				System.out.println("Enter room number :");
				int num=input.nextInt();
				
				
				if(hotel.cancelBooking(id, num )) {
					System.out.println("your booking has been canceled successfully! ");
				System.out.println("==============================================\n");}
				
				else {
					System.out.println("sorry!, couldn't cancel your booking");
					System.out.println("==============================================\n"); 
					}
				break;
			case 2 :
				System.out.println("Enter customer id :");
				 id = input.next();
				System.out.println("Enter room number :");
				 num=input.nextInt();
				Booking B=hotel.findBooking(id , num );
				 if(B==null) {
					 System.out.println("coudln't found your booking !  ");
				 System.out.println("==============================================\n");}
				 else {
					 B.checkOut();
					 System.out.println("==============================================\n");}
				 break;
			case 3 : 
				System.out.println("");
				break;
				default :
					System.out.println(" invalid input");
				
				
				
			}
			
			
		}
		//--------------------------------------------------------------------------
		public static void findBooking() {
			System.out.println("==============================================");
			System.out.println("\nEnter customer id :");
			String id = input.next();
			System.out.println("Enter room number :");
			int num=input.nextInt();
			Booking B=hotel.findBooking(id , num );
			if(B==null)
				System.out.println("coudln't found your booking ! ");
			else 
				System.out.println(B.toString());
			System.out.println("==============================================\n");
		}
	

		
		
		
	
	}
